using MelonLoader;
using Odium.Components;
using Odium.Odium;
using Odium.Wrappers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using Odium.ButtonAPI.QM;
using static Odium.OdiumConsole;
using Odium.Modules;
using Odium.Patches;
using VampClient.Api;
using System.IO;

namespace Odium.QMPages
{
    class Exploits
    {
        private static List<string> preGeneratedMessages = new List<string>();
        private static System.Random random = new System.Random();
        private static object chatboxLaggerCoroutine = null;
        private static int currentAnimationIndex = 0;
        private static readonly string[][] allAnimations = new string[][]
        {
            // Original Odium Client
            new string[]
            {
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ o⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ od⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odi⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiu⠀⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odium⠀⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumv⠀⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvr⠀⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvrc⠀⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvrc.⠀⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvrc.c⠀⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvrc.co⠀⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvrc.com⠀⟧\nThis can NOT be real\nRight?",
                "⟦ odiumvrc.com ⟧\nThis can NOT be real\nRight?"
            },

            // Matrix style -> odiumvrc.com
            new string[]
            {
                "⟦ ██████████████ ⟧",
                "⟦ ▓█████████████ ⟧",
                "⟦ ▒▓████████████ ⟧",
                "⟦ ░▒▓███████████ ⟧",
                "⟦ ⠀░▒▓██████████ ⟧",
                "⟦ ⠀⠀░▒▓█████████ ⟧",
                "⟦ ⠀⠀⠀░▒▓████████ ⟧",
                "⟦ ⠀⠀⠀⠀░▒▓███████ ⟧",
                "⟦ ⠀⠀⠀⠀⠀░▒▓██████ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀░▒▓█████ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀░▒▓████ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀░▒▓███ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒▓██ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒▓█ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░▒ ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀░ ⟧",
                "⟦ odiumvrc.com ⟧"
            },

            // Glitch effect -> odiumvrc.com
            new string[]
            {
                "⟦ ø∂!ʉɱvɾȼ.ȼøɱ ⟧",
                "⟦ 0d1umvrc.c0m ⟧",
                "⟦ øđɨữmvɾȼ.ȼøm ⟧",
                "⟦ odiumvrc.com ⟧",
                "⟦ ÖÐ1ÛMVRç.çÖM ⟧",
                "⟦ odiumvrc.com ⟧",
                "⟦ ōđįūmvɾč.čōm ⟧",
                "⟦ odiumvrc.com ⟧"
            },

            // Loading bars -> odiumvrc.com
            new string[]
            {
                "⟦ [             ] 0% ⟧",
                "⟦ [▓            ] 8% ⟧",
                "⟦ [▓▓           ] 15% ⟧",
                "⟦ [▓▓▓          ] 23% ⟧",
                "⟦ [▓▓▓▓         ] 31% ⟧",
                "⟦ [▓▓▓▓▓        ] 38% ⟧",
                "⟦ [▓▓▓▓▓▓       ] 46% ⟧",
                "⟦ [▓▓▓▓▓▓▓      ] 54% ⟧",
                "⟦ [▓▓▓▓▓▓▓▓     ] 62% ⟧",
                "⟦ [▓▓▓▓▓▓▓▓▓    ] 69% ⟧",
                "⟦ [▓▓▓▓▓▓▓▓▓▓   ] 77% ⟧",
                "⟦ [▓▓▓▓▓▓▓▓▓▓▓  ] 85% ⟧",
                "⟦ [▓▓▓▓▓▓▓▓▓▓▓▓ ] 92% ⟧",
                "⟦ [▓▓▓▓▓▓▓▓▓▓▓▓▓] 100% ⟧",
                "⟦ odiumvrc.com ⟧"
            },

            // Spinning animation -> odiumvrc.com
            new string[]
            {
                "⟦ |   LOADING   | ⟧",
                "⟦ /   LOADING   / ⟧",
                "⟦ —   LOADING   — ⟧",
                "⟦ \\   LOADING   \\ ⟧",
                "⟦ |   LOADING   | ⟧",
                "⟦ /   LOADING   / ⟧",
                "⟦ —   LOADING   — ⟧",
                "⟦ \\   LOADING   \\ ⟧",
                "⟦ odiumvrc.com ⟧"
            },

            // Typewriter with cursor -> odiumvrc.com
            new string[]
            {
                "⟦ |⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ o|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ od|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odi|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiu|⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odium|⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiumv|⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiumvr|⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiumvrc|⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiumvrc.|⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiumvrc.c|⠀⠀⠀⠀ ⟧",
                "⟦ odiumvrc.co|⠀⠀⠀ ⟧",
                "⟦ odiumvrc.com|⠀⠀ ⟧",
                "⟦ odiumvrc.com| ⟧",
                "⟦ odiumvrc.com ⟧"
            },

            // ASCII explosion -> odiumvrc.com
            new string[]
            {
                "⟦ ⠀⠀⠀⠀⠀⠀•⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ ⠀⠀⠀⠀⠀*⚬*⠀⠀⠀⠀⠀ ⟧",
                "⟦ ⠀⠀⠀⠀*⚬⚹⚬*⠀⠀⠀⠀ ⟧",
                "⟦ ⠀⠀⠀*⚬⚹❋⚹⚬*⠀⠀⠀ ⟧",
                "⟦ ⠀⠀*⚬⚹❋❋❋⚹⚬*⠀⠀ ⟧",
                "⟦ ⠀*⚬⚹❋❋❋❋❋⚹⚬*⠀ ⟧",
                "⟦ *⚬⚹❋❋❋❋❋❋❋⚹⚬* ⟧",
                "⟦ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⟧",
                "⟦ odiumvrc.com ⟧"
            }
        };

        private static readonly string[] animationNames = new string[]
        {
            "Classic",
            "Matrix",
            "Glitch",
            "Loading",
            "Spinner",
            "Typewriter",
            "Explosion"
        };

        private static void NextAnimation()
        {
            currentAnimationIndex = (currentAnimationIndex + 1) % allAnimations.Length;
            string currentName = animationNames[currentAnimationIndex];
            OdiumConsole.Log("Animation", $"Switched to: {currentName}");
            ToastBase.Toast("Odium Animation", $"Switched to '{currentName}' animation style", PhotonPatches.LogoIcon, 3);
        }

        private static void PreviousAnimation()
        {
            currentAnimationIndex = (currentAnimationIndex - 1 + allAnimations.Length) % allAnimations.Length;
            string currentName = animationNames[currentAnimationIndex];
            OdiumConsole.Log("Animation", $"Switched to: {currentName}");
            ToastBase.Toast("Odium Animation", $"Switched to '{currentName}' animation style", PhotonPatches.LogoIcon, 3);
        }

        private static string[] GetCurrentAnimation()
        {
            return allAnimations[currentAnimationIndex];
        }
        public static string[] GenerateBubblePopAnimation()
        {
            var messages = new List<string>();
            string text = "Odium Client";
            string baseBrackets = "[ ";
            string endBrackets = " ]";

            // Start with all bubbles
            string initialState = baseBrackets + new string('○', text.Length) + endBrackets;
            messages.Add(initialState);

            // Pop each bubble one by one
            for (int i = 0; i < text.Length; i++)
            {
                var chars = new char[text.Length];

                // Fill the character array
                for (int j = 0; j < text.Length; j++)
                {
                    if (j < i)
                    {
                        // Already revealed letters
                        chars[j] = text[j];
                    }
                    else if (j == i)
                    {
                        // Currently popping bubble
                        chars[j] = '◌';
                    }
                    else
                    {
                        // Still bubbles
                        chars[j] = '○';
                    }
                }

                // Add the "getting ready to pop" state
                string readyToPop = baseBrackets + new string(chars) + endBrackets;
                messages.Add(readyToPop);

                // Now show the pop with star
                chars[i] = '★';
                string popping = baseBrackets + new string(chars) + endBrackets;
                messages.Add(popping);

                // Finally reveal the letter
                chars[i] = text[i];
                string revealed = baseBrackets + new string(chars) + endBrackets;
                messages.Add(revealed);
            }

            // Final state with complete text
            string finalState = baseBrackets + text + endBrackets;
            messages.Add(finalState);

            return messages.ToArray();
        }
        public static void InitializePage(QMNestedMenu exploitsButton, Sprite buttonImage)
        {
            Sprite DroneIcon = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Drone.png");

            //Udon Block
            new QMToggleButton(exploitsButton, 1f, 0, "Udon Block", () =>
            {
                Log("Exploits: ", "Udon Block Enabled", LogLevel.Info);
                Patches.PhotonPatches.BlockUdon = true;
            }, delegate
            {
                Log("Exploits: ", "Udon Block Disabled", LogLevel.Info);
                Patches.PhotonPatches.BlockUdon = false;
            }, "Stops udon from working, remember this will break game worlds", false, buttonImage);
            
            
            //Ghost Mode
            new QMToggleButton(exploitsButton, 2f, 0, "Ghost Mode", () =>
            {
                Log("Exploits: ", "Ghost Mode Enabled", LogLevel.Info);
                GhostMode.ToggleGhost(true);
            }, delegate
            {
                Log("Exploits: ", "Ghost Mode Disabled", LogLevel.Info);
                GhostMode.ToggleGhost(false);
            }, "They can't see me like john cena", false, buttonImage);

            
            //Chatbox Lagger
            new QMToggleButton(exploitsButton, 3f, 0, "Chatbox Lagger", () =>
            {
                Log("Exploits: ", "Chatbox Lagger Enabled", LogLevel.Info);
                AssignedVariables.chatboxLagger = true;
            }, delegate
            {
                Log("Exploits: ", "Chatbox Lagger Disabled", LogLevel.Info);
                AssignedVariables.chatboxLagger = false;
            }, "Ever wanted to read the bible in chinese?", false, buttonImage);
            
            //Loud Mic
            new QMToggleButton(exploitsButton, 4f, 0, "Loud Mic", () =>
            {
                LoudMic.Activated(true);
            }, delegate
            {
                LoudMic.Activated(false);
            }, "Makes your microphone loud as hell", false, buttonImage);

            new QMToggleButton(exploitsButton, 1f, 1, "USpeak Spam", () =>
            {
                USpeakSpam.ToggleUSpeakSpam(true);
            }, delegate
            {
                USpeakSpam.ToggleUSpeakSpam(false);
            }, "Makes your microphone loud as hell", false, buttonImage);

            new QMToggleButton(exploitsButton, 2f, 1, "Anti Quest", () =>
            {
                if (!PlayerWrapper.LocalPlayer.field_Private_APIUser_0.isSupporter)
                {
                    OdiumBottomNotification.ShowNotification("You need <color=Ffd700>VRC+</color> for this!");
                    return;
                }

                AssignedVariables.autoDroneCrash = true;
                OdiumBottomNotification.ShowNotification("Anti Quest <color=green>enabled</color>");
            }, delegate
            {
                if (!PlayerWrapper.LocalPlayer.field_Private_APIUser_0.isSupporter)
                {
                    OdiumBottomNotification.ShowNotification("You need <color=Ffd700>VRC+</color> for this!");
                    return;
                }

                AssignedVariables.autoDroneCrash = false;
                OdiumBottomNotification.ShowNotification("Anti Quest <color=red>disabled</color>");
            }, "Makes your microphone loud as hell", false, buttonImage);

            new QMSingleButton(exploitsButton, 1f, 3, "Drone Crash", () =>
            {
                DroneWrapper.DroneCrash();
            }, "Gay", false, DroneIcon, buttonImage);

            Sprite SkipIcon = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Skip.png");
            Sprite RewindIcon = SpriteUtil.LoadFromDisk(Environment.CurrentDirectory + "\\Odium\\Rewind.png");

            new QMSingleButton(
                exploitsButton,
                2f,
                3,
                "Prev Anim",
                () => {
                    PreviousAnimation();
                },
                "Previous animation style",
                false,
                RewindIcon,
                buttonImage
            );

            new QMSingleButton(
                exploitsButton,
                4f,
                3,
                "Next Anim",
                () => {
                    NextAnimation();
                },
                "Next animation style",
                false,
                SkipIcon,
                buttonImage
            );

            new QMToggleButton(
                exploitsButton,
                3f,
                3,
                "Chatbox Anim",
                () => {
                    Chatbox.SendFrameAnimation(
                        frames: GetCurrentAnimation(),
                        effectId: "odium_animation",
                        loop: true,
                        loopWaitTime: 2f
                    );
                },
                () => {
                    Chatbox.CancelFrameEffect("odium_animation");
                },
                $"Shows {animationNames[currentAnimationIndex]} animation in chat",
                false,
                buttonImage
            );
        }

        private static void PreGenerateMessages(int count)
        {
            for (int i = 0; i < count; i++)
            {
                var chineseChars = new char[144];
                for (int j = 0; j < 144; j++)
                {
                    chineseChars[j] = (char)random.Next(0x4E00, 0x9FFF + 1);
                }
                preGeneratedMessages.Add(new string(chineseChars));
            }
        }

        private static HashSet<char> usedChineseChars = new HashSet<char>();
        private static char[] chineseCharsBuffer = new char[144];

        private static float chatboxLaggerTimer = 0f;
        private static readonly float ChatboxLaggerInterval = 0.12f;

        public static void UpdateChatboxLagger()
        {
            if (!AssignedVariables.chatboxLagger) return;

            chatboxLaggerTimer += Time.deltaTime;

            if (chatboxLaggerTimer >= ChatboxLaggerInterval)
            {
                chatboxLaggerTimer = 0f;

                for (int j = 0; j < 144; j++)
                {
                    char randomChar;
                    int attempts = 0;
                    const int maxAttempts = 100;
                    do
                    {
                        randomChar = (char)random.Next(0x4E00, 0x9FFF + 1);
                        attempts++;
                        if (attempts >= maxAttempts)
                        {
                            usedChineseChars.Clear();
                            break;
                        }
                    }
                    while (usedChineseChars.Contains(randomChar));
                    usedChineseChars.Add(randomChar);
                    chineseCharsBuffer[j] = randomChar;
                }
                Chatbox.SendCustomChatMessage(new string(chineseCharsBuffer));
            }
        }
    }
}
