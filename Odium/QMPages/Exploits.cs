using MelonLoader;
using Odium.Components;
using Odium.Odium;
using Odium.Wrappers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VampClient.Api;
using static Odium.OdiumConsole;

namespace Odium.QMPages
{
    class Exploits
    {
        private static List<string> preGeneratedMessages = new List<string>();
        private static System.Random random = new System.Random();
        private static object chatboxLaggerCoroutine = null;

        public static void InitializePage(QMNestedMenu exploitsButton, Sprite buttonImage)
        {
            
            //Udon Block
            new QMToggleButton(exploitsButton, 1.5f, 0, "Udon Block", () =>
            {
                Log("Exploits: ", "Udon Block Enabled", LogLevel.Info);
                Patches.PhotonPatches.BlockUdon = true;
            }, delegate
            {
                Log("Exploits: ", "Udon Block Disabled", LogLevel.Info);
                Patches.PhotonPatches.BlockUdon = false;
            }, "Stops udon from working, remember this will break game worlds", false, buttonImage);
            
            
            //Ghost Mode
            new QMToggleButton(exploitsButton, 2.5f, 0, "Ghost Mode", () =>
            {
                Log("Exploits: ", "Ghost Mode Enabled", LogLevel.Info);
                ActionWrapper.serialize = true;
            }, delegate
            {
                Log("Exploits: ", "Ghost Mode Disabled", LogLevel.Info);
                ActionWrapper.serialize = false;
            }, "They can't see me like john cena", false, buttonImage);

            
            //Chatbox Lagger
            new QMToggleButton(exploitsButton, 3.5f, 0, "Chatbox Lagger", () =>
            {
                Log("Exploits: ", "Chatbox Lagger Enabled", LogLevel.Info);
                AssignedVariables.chatboxLagger = true;
                chatboxLaggerCoroutine = MelonCoroutines.Start(OptimizedChatboxLaggerCoroutine());
            }, delegate
            {
                Log("Exploits: ", "Chatbox Lagger Disabled", LogLevel.Info);
                AssignedVariables.chatboxLagger = false;
                if (chatboxLaggerCoroutine != null)
                {
                    MelonCoroutines.Stop(chatboxLaggerCoroutine);
                    chatboxLaggerCoroutine = null;
                }
            }, "Ever wanted to read the bible in chinese?", false, buttonImage);
            
            //Loud Mic
            new QMToggleButton(exploitsButton, 4.5f, 0, "Loud Mic", () =>
            {
                LoudMic.Activated(true);
            }, delegate
            {
                LoudMic.Activated(false);
            }, "Makes your microphone loud as hell", false, buttonImage);
        }

        private static void PreGenerateMessages(int count)
        {
            for (int i = 0; i < count; i++)
            {
                var chineseChars = new char[144];
                for (int j = 0; j < 144; j++)
                {
                    chineseChars[j] = (char)random.Next(0x4E00, 0x9FFF + 1);
                }
                preGeneratedMessages.Add(new string(chineseChars));
            }
        }

        private static IEnumerator OptimizedChatboxLaggerCoroutine()
        {
            while (true)
            {
                if (!AssignedVariables.chatboxLagger) yield return null;

                if (preGeneratedMessages.Count == 0)
                    PreGenerateMessages(10);

                Chatbox.SendCustomChatMessage(preGeneratedMessages[0]);
                preGeneratedMessages.RemoveAt(0);
                yield return new WaitForSecondsRealtime(0.5f);
            }
        }
    }
}
